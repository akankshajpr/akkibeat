package beater

import (
	"fmt"
	"time"
	"net/http"
	"io/ioutil"
	"encoding/json"
	"github.com/elastic/beats/libbeat/beat"
	"github.com/elastic/beats/libbeat/common"
	"github.com/elastic/beats/libbeat/logp"

	"github.com/akankshajpr/akkibeat/config"
)



	type AutoGenerated struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    struct {
		TableData struct {
			Num0 struct {
				RESPONSETIME struct {
					Average                    float64         `json:"average"`
					Nine5Percentile            float64         `json:"95_percentile"`
					Min                        float64         `json:"min"`
					AverageDescription         string          `json:"average_description"`
					Max                        float64         `json:"max"`
					ChartData                  [][]interface{} `json:"chart_data"`
					Title                      string          `json:"title"`
					Unit                       string          `json:"unit"`
					Nine5PercentileDescription string          `json:"95_percentile_description"`
				} `json:"RESPONSETIME"`
			} `json:"0"`
		} `json:"table_data"`
		Info struct {
			FormattedEndTime       string `json:"formatted_end_time"`
			MonitorType            string `json:"monitor_type"`
			ResourceID             string `json:"resource_id"`
			ResourceTypeName       string `json:"resource_type_name"`
			PeriodName             string `json:"period_name"`
			GeneratedTime          string `json:"generated_time"`
			MetricAggregationName  string `json:"metric_aggregation_name"`
			ReportName             string `json:"report_name"`
			EndTime                string `json:"end_time"`
			MetricAggregation      int    `json:"metric_aggregation"`
			StartTime              string `json:"start_time"`
			SegmentType            int    `json:"segment_type"`
			ReportType             int    `json:"report_type"`
			Period                 int    `json:"period"`
			ResourceName           string `json:"resource_name"`
			FormattedStartTime     string `json:"formatted_start_time"`
			FormattedGeneratedTime string `json:"formatted_generated_time"`
			ResourceType           int    `json:"resource_type"`
		} `json:"info"`
		ChartData []struct {
			Num0 struct {
				ResponseTimeReportChart struct {
					Max             []float64       `json:"max"`
					Min             []float64       `json:"min"`
					Nine5Percentile []float64       `json:"95_percentile"`
					Average         []float64       `json:"average"`
					ChartData       [][]interface{} `json:"chart_data"`
				} `json:"ResponseTimeReportChart"`
			} `json:"0,omitempty"`
			Legends                   []string `json:"legends,omitempty"`
			LocationResponseTimeChart []struct {
				Num1 struct {
					Max             []float64       `json:"max"`
					Label           string          `json:"label"`
					Min             []float64       `json:"min"`
					Nine5Percentile []float64       `json:"95_percentile"`
					Average         []float64       `json:"average"`
					ChartData       [][]interface{} `json:"chart_data"`
				} `json:"1,omitempty"`
				Num6 struct {
					Max             []float64       `json:"max"`
					Label           string          `json:"label"`
					Min             []float64       `json:"min"`
					Nine5Percentile []float64       `json:"95_percentile"`
					Average         []float64       `json:"average"`
					ChartData       [][]interface{} `json:"chart_data"`
				} `json:"6,omitempty"`
				Num15 struct {
					Max             []float64       `json:"max"`
					Label           string          `json:"label"`
					Min             []float64       `json:"min"`
					Nine5Percentile []float64       `json:"95_percentile"`
					Average         []float64       `json:"average"`
					ChartData       [][]interface{} `json:"chart_data"`
				} `json:"15,omitempty"`
			} `json:"LocationResponseTimeChart,omitempty"`
		} `json:"chart_data"`
	} `json:"data"`
}


type Smartcenterbeat struct {
	done   chan struct{}
	config config.Config
	client beat.Client
}

// Creates beater
func New(b *beat.Beat, cfg *common.Config) (beat.Beater, error) {
	config := config.DefaultConfig
	if err := cfg.Unpack(&config); err != nil {
		return nil, fmt.Errorf("Error reading config file: %v", err)
	}

	bt := &Smartcenterbeat{
		done:   make(chan struct{}),
		config: config,
	}
	return bt, nil
}

func (bt *Smartcenterbeat) Run(b *beat.Beat) error {
	logp.Info("smartcenter is running! Hit CTRL-C to stop it.")
	logp.Info("akkibeat is running! Hit CTRL-C to stop it.")

	var err error
	bt.client, err = b.Publisher.Connect()
	if err != nil {
		return err
	}
        fmt.Println("bt.config.Url", bt.config.Url)

	ticker := time.NewTicker(bt.config.Period)
	counter := 0
	for {
		select {
		case <-bt.done:
			return nil
		case <-ticker.C:
		}

		client := &http.Client{}
		req, err := http.NewRequest("GET",bt.config.Url,nil)
		req.Header.Add("Authorization",bt.config.Authorization)

		resp, err := client.Do(req)
		if err != nil {
				return  err
		}
		defer resp.Body.Close()
		fmt.Println(resp.Body)
		var akkidata AutoGenerated
		if resp.StatusCode == http.StatusOK {
				bodyBytes, err2 := ioutil.ReadAll(resp.Body)
				//abc := string(bodyBytes)

					if err2 != nil {
						return  err
				}
				 json.Unmarshal(bodyBytes, &akkidata)
				fmt.Println(string(bodyBytes))

}
  
fmt.Println("new")
fmt.Println(akkidata)
//   //
	 	 
	for d:= range akkidata.Data.ChartData[0].Num0.ResponseTimeReportChart.ChartData {

	 	event := beat.Event{
 		Timestamp: time.Now(),
	 	 		Fields: common.MapStr{
	 	 		"mytimestamp":  akkidata.Data.ChartData[0].Num0.ResponseTimeReportChart.ChartData[d][0],
	 	 		"type":	"akkibeat",
	 	 		"counter": counter,
	 	 		"Message": akkidata.Message,
	 	 		"DownloadTime": akkidata.Data.ChartData[0].Num0.ResponseTimeReportChart.ChartData[d][5],
	 	 		//"Label": akkidata.Data.ChartData[0].LocationResponseTimeChart[0].Num6.Label,
	 	 		"FirstByteTime": akkidata.Data.ChartData[0].Num0.ResponseTimeReportChart.ChartData[d][4],
	 	 		"SSLTime": akkidata.Data.ChartData[0].Num0.ResponseTimeReportChart.ChartData[d][3],
	 	 	},
	 	 }
	 	bt.client.Publish(event)
	 	logp.Info("Event sent")
	 }
	counter++
	}
}

func (bt *Smartcenterbeat) Stop() {
	bt.client.Close()
	close(bt.done)
}



